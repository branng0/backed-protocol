{"metadata":"{\"compiler\":{\"version\":\"0.8.10\"},\"sources\":{\"contracts/NFTLoanFacilitator.sol\":{\"content\":\"pragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {SafeTransferLib, ERC20} from \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport './interfaces/INFTLoanFacilitator.sol';\\nimport './interfaces/IERC721Mintable.sol';\\nimport './interfaces/ILendTicket.sol';\\n\\n\\nstruct Loan {\\n    bool closed;\\n    // max = (((2^16 - 1)*60*60*24*365) / 10 ^ 10) ~= 20k % APR\\n    uint16 perSecondInterestRate;\\n    uint32 durationSeconds;\\n    // at which timestamp was the accumulated interest most recently calculated\\n    uint40 lastAccumulatedTimestamp;\\n    address collateralContractAddress;\\n    address loanAssetContractAddress;\\n    // used to track loanAsset amount of interest accumulated, incase of interest rate change\\n    uint256 accumulatedInterest;\\n    uint256 loanAmount;\\n    uint256 collateralTokenId;\\n}\\n\\ncontract NFTLoanFacilitator is Ownable, INFTLoanFacilitator {\\n    using SafeTransferLib for ERC20;\\n\\n    /** \\n     * See {INFTLoanFacilitator-INTEREST_RATE_DECIMALS}.     \\n     * @dev lowest non-zero APR possible = (1/10^10)*(60*60*24*365) = 0.003 = 0.3%\\n     */\\n    uint8 public constant override INTEREST_RATE_DECIMALS = 10;\\n\\n    /// See {INFTLoanFacilitator-originationFeeRate}.\\n    uint32 public override originationFeeRate = uint32(10) ** (INTEREST_RATE_DECIMALS - 2);\\n    \\n    /// See {INFTLoanFacilitator-SCALAR}.\\n    uint40 public constant override SCALAR = uint40(10) ** INTEREST_RATE_DECIMALS;\\n\\n    /// @dev tracks loan count\\n    uint64 private _nonce;\\n\\n    /// See {INFTLoanFacilitator-lendTicketContract}.\\n    address public override lendTicketContract;\\n\\n    /// See {INFTLoanFacilitator-borrowTicketContract}.\\n    address public override borrowTicketContract;\\n\\n    /// See {INFTLoanFacilitator-requiredImprovementPercentage}.\\n    uint256 public override requiredImprovementPercentage = 10;\\n\\n    mapping(uint256 => Loan) public _loanInfo;\\n\\n    // ==== modifiers ====\\n\\n    modifier loanExists(uint256 loanId) { \\n        require(loanId <= _nonce, \\\"NFTLoanFacilitator: loan does not exist\\\");\\n        _; \\n    }\\n\\n    modifier notClosed(uint256 loanId) { \\n        require(!_loanInfo[loanId].closed, \\\"NFTLoanFacilitator: loan closed\\\");\\n        _; \\n    }\\n\\n    // ==== view ====\\n\\n    /// See {INFTLoanFacilitator-_loanInfo}.\\n    function loanInfo(uint256 loanId)\\n    loanExists(loanId)\\n    external view override\\n    returns (bool closed,\\n        uint16 perSecondInterestRate,\\n        uint32 durationSeconds,\\n        uint40 lastAccumulatedTimestamp,\\n        address collateralContractAddress,\\n        address loanAssetContractAddress,\\n        uint256 accumulatedInterest,\\n        uint256 loanAmount,\\n        uint256 collateralTokenId) \\n    {\\n        Loan memory loan = _loanInfo[loanId];\\n        return (loan.closed,\\n         loan.perSecondInterestRate,\\n         loan.durationSeconds,\\n         loan.lastAccumulatedTimestamp,\\n         loan.collateralContractAddress,\\n         loan.loanAssetContractAddress,\\n         loan.accumulatedInterest,\\n         loan.loanAmount,\\n         loan.collateralTokenId);\\n    }\\n\\n    /// See {INFTLoanFacilitator-totalOwed}.\\n    function totalOwed(uint256 loanId) loanExists(loanId) override view external returns (uint256) {\\n        Loan storage loan = _loanInfo[loanId];\\n        if(loan.closed || loan.lastAccumulatedTimestamp == 0){\\n            return 0;\\n        }\\n\\n        return _loanInfo[loanId].loanAmount + _interestOwed(loan);\\n    }\\n\\n    /// See {INFTLoanFacilitator-interestOwed}.\\n    function interestOwed(uint256 loanId) loanExists(loanId) override view public returns (uint256) {\\n        Loan storage loan = _loanInfo[loanId];\\n        return _interestOwed(loan);\\n    }\\n\\n    /// @dev Returns the interest owed, in loan asset units, for `loan`\\n    function _interestOwed(Loan storage loan) private view returns (uint256) {\\n        if(loan.closed || loan.lastAccumulatedTimestamp == 0){\\n            return 0;\\n        }\\n        \\n        return loan.loanAmount\\n            * (block.timestamp - loan.lastAccumulatedTimestamp)\\n            * loan.perSecondInterestRate\\n            / SCALAR\\n            + loan.accumulatedInterest;\\n    }\\n\\n    /// See {INFTLoanFacilitator-loanEndSeconds}.\\n    function loanEndSeconds(uint256 loanId) loanExists(loanId) override view external returns (uint256) {\\n        Loan storage loan = _loanInfo[loanId];\\n        return loan.durationSeconds + loan.lastAccumulatedTimestamp;\\n    }\\n\\n    constructor(address _manager) {\\n        transferOwnership(_manager);\\n    }\\n\\n    // ==== state changing ====\\n\\n    /// See {INFTLoanFacilitator-createLoan}.\\n    function createLoan(\\n            uint256 collateralTokenId,\\n            address collateralContractAddress,\\n            uint16 maxPerSecondInterest,\\n            uint256 minLoanAmount,\\n            address loanAssetContractAddress,\\n            uint32 minDurationSeconds,\\n            address mintBorrowTicketTo\\n        )\\n        override\\n        external\\n        returns(uint256 id) \\n    {\\n        require(collateralContractAddress != lendTicketContract \\n        && collateralContractAddress != borrowTicketContract, \\n        'NFTLoanFacilitator: cannot use tickets as collateral');\\n        \\n        IERC721(collateralContractAddress).transferFrom(msg.sender, address(this), collateralTokenId);\\n\\n        id = ++_nonce;\\n        Loan storage loan = _loanInfo[id];\\n        loan.loanAssetContractAddress = loanAssetContractAddress;\\n        loan.loanAmount = minLoanAmount;\\n        loan.collateralTokenId = collateralTokenId;\\n        loan.collateralContractAddress = collateralContractAddress;\\n        loan.perSecondInterestRate = maxPerSecondInterest;\\n        loan.durationSeconds = minDurationSeconds;\\n        \\n        IERC721Mintable(borrowTicketContract).mint(mintBorrowTicketTo, id);\\n        emit CreateLoan(\\n            id,\\n            msg.sender,\\n            collateralTokenId,\\n            collateralContractAddress,\\n            maxPerSecondInterest,\\n            loanAssetContractAddress,\\n            minLoanAmount,\\n            minDurationSeconds\\n            );\\n    }\\n\\n    /// See {INFTLoanFacilitator-closeLoan}.\\n    function closeLoan(uint256 loanId, address sendCollateralTo) notClosed(loanId) override external {\\n        require(IERC721(borrowTicketContract).ownerOf(loanId) == msg.sender, \\\"NFTLoanFacilitator: borrower only\\\");\\n\\n        Loan storage loan = _loanInfo[loanId];\\n        require(loan.lastAccumulatedTimestamp == 0, \\\"NFTLoanFacilitator: underwritten, use repayAndCloseLoan\\\");\\n        \\n        loan.closed = true;\\n        IERC721(loan.collateralContractAddress).transferFrom(address(this), sendCollateralTo, loan.collateralTokenId);\\n        emit Close(loanId);\\n    }\\n\\n    /// See {INFTLoanFacilitator-underwriteLoan}.\\n    function underwriteLoan(\\n            uint256 loanId,\\n            uint16 interestRate,\\n            uint256 amount,\\n            uint32 durationSeconds,\\n            address sendLendTicketTo\\n        ) \\n        override\\n        loanExists(loanId)\\n        notClosed(loanId)\\n        external \\n    {\\n        Loan storage loan = _loanInfo[loanId];\\n        require(loan.perSecondInterestRate >= interestRate \\n        && loan.durationSeconds <= durationSeconds && loan.loanAmount <= amount, \\n        \\\"NFTLoanFacilitator: Proposed terms do not qualify\\\" );\\n\\n        if(loan.lastAccumulatedTimestamp == 0){\\n            loan.perSecondInterestRate = interestRate;\\n            loan.lastAccumulatedTimestamp = uint40(block.timestamp);\\n            loan.durationSeconds = durationSeconds;\\n            loan.loanAmount = amount;\\n\\n            ERC20(loan.loanAssetContractAddress).safeTransferFrom(msg.sender, address(this), amount);\\n            uint256 facilitatorTake = amount * originationFeeRate / SCALAR;\\n            ERC20(loan.loanAssetContractAddress).safeTransfer(\\n                IERC721(borrowTicketContract).ownerOf(loanId),\\n                amount - facilitatorTake\\n                );\\n            IERC721Mintable(lendTicketContract).mint(sendLendTicketTo, loanId);\\n        } else {\\n            uint256 amountIncrease = amount - loan.loanAmount;\\n            require((loan.loanAmount * requiredImprovementPercentage / 100) <= amountIncrease\\n            || loan.durationSeconds + (loan.durationSeconds * requiredImprovementPercentage / 100) <= durationSeconds \\n            || loan.perSecondInterestRate - (loan.perSecondInterestRate * requiredImprovementPercentage / 100) >= interestRate, \\n            \\\"NFTLoanFacilitator: proposed terms must be better than existing terms\\\");\\n\\n            uint256 accumulatedInterest = _interestOwed(loan);\\n            uint256 previousLoanAmount = loan.loanAmount;\\n\\n            loan.perSecondInterestRate = interestRate;\\n            loan.lastAccumulatedTimestamp = uint40(block.timestamp);\\n            loan.durationSeconds = durationSeconds;\\n            loan.loanAmount = amount;\\n            loan.accumulatedInterest = accumulatedInterest;\\n\\n            address currentLoanOwner = IERC721(lendTicketContract).ownerOf(loanId);\\n            ILendTicket(lendTicketContract).loanFacilitatorTransfer(currentLoanOwner, sendLendTicketTo, loanId);\\n            if(amountIncrease > 0){\\n                ERC20(loan.loanAssetContractAddress).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    amount + accumulatedInterest\\n                );\\n                ERC20(loan.loanAssetContractAddress).safeTransfer(\\n                    currentLoanOwner,\\n                    accumulatedInterest + previousLoanAmount\\n                );\\n                uint256 facilitatorTake = (amountIncrease * originationFeeRate / SCALAR);\\n                ERC20(loan.loanAssetContractAddress).safeTransfer(\\n                    IERC721(borrowTicketContract).ownerOf(loanId),\\n                    amountIncrease - facilitatorTake\\n                );\\n            } else {\\n                ERC20(loan.loanAssetContractAddress).safeTransferFrom(\\n                    msg.sender,\\n                    currentLoanOwner,\\n                    accumulatedInterest + previousLoanAmount\\n                );\\n            }\\n            emit BuyoutUnderwriter(loanId, msg.sender, currentLoanOwner, accumulatedInterest, previousLoanAmount);\\n        }\\n        emit UnderwriteLoan(loanId, msg.sender, interestRate, amount, durationSeconds);\\n    }\\n\\n    /// See {INFTLoanFacilitator-repayAndCloseLoan}.\\n    function repayAndCloseLoan(uint256 loanId) loanExists(loanId) notClosed(loanId) override external {\\n        Loan storage loan = _loanInfo[loanId];\\n\\n        uint256 interest = _interestOwed(loan);\\n        address lender = IERC721(lendTicketContract).ownerOf(loanId);\\n        loan.closed = true;\\n        ERC20(loan.loanAssetContractAddress).safeTransferFrom(msg.sender, lender, interest + loan.loanAmount);\\n        IERC721(loan.collateralContractAddress).transferFrom(\\n            address(this),\\n            IERC721(borrowTicketContract).ownerOf(loanId),\\n            loan.collateralTokenId\\n            );\\n        emit Repay(loanId, msg.sender, lender, interest, loan.loanAmount);\\n        emit Close(loanId);\\n    }\\n\\n    /// See {INFTLoanFacilitator-seizeCollateral}.\\n    function seizeCollateral(uint256 loanId, address sendCollateralTo) notClosed(loanId) override external {\\n        require(IERC721(lendTicketContract).ownerOf(loanId) == msg.sender, \\\"NFTLoanFacilitator: underwriter only\\\");\\n\\n        Loan storage loan = _loanInfo[loanId];\\n        require(block.timestamp > loan.durationSeconds + loan.lastAccumulatedTimestamp,\\n        \\\"NFTLoanFacilitator: payment is not late\\\");\\n\\n        loan.closed = true;\\n        IERC721(loan.collateralContractAddress).transferFrom(address(this), sendCollateralTo, loan.collateralTokenId);\\n        emit SeizeCollateral(loanId);\\n        emit Close(loanId);\\n    }\\n\\n    // === manager state changing\\n\\n    /**\\n     * @notice Sets lendTicketContract to _contract\\n     * @dev cannot be set if lendTicketContract is already set\\n     */\\n    function setLendTicketContract(address _contract) onlyOwner() external {\\n        require(lendTicketContract == address(0), 'NFTLoanFacilitator: already set');\\n\\n        lendTicketContract = _contract;\\n    }\\n\\n    /**\\n     * @notice Sets borrowTicketContract to _contract\\n     * @dev cannot be set if borrowTicketContract is already set\\n     */\\n    function setBorrowTicketContract(address _contract) onlyOwner() external {\\n        require(borrowTicketContract == address(0), 'NFTLoanFacilitator: already set');\\n\\n        borrowTicketContract = _contract;\\n    }\\n\\n    /// @notice Transfers `amount` of loan origination fees for `asset` to `to`\\n    function withdrawOriginationFees(address asset, uint256 amount, address to) onlyOwner external {\\n        ERC20(asset).safeTransfer(to, amount);\\n\\n        emit WithdrawOriginationFees(asset, amount, to);\\n    }\\n\\n    /**\\n     * @notice Updates originationFeeRate the faciliator keeps of each loan amount\\n     * @dev Cannot be set higher than 5%\\n     */\\n    function updateOriginationFeeRate(uint32 _originationFeeRate) onlyOwner external {\\n        require(_originationFeeRate <= 5 * (10 ** (INTEREST_RATE_DECIMALS - 2)), \\\"NFTLoanFacilitator: max fee 5%\\\");\\n        \\n        originationFeeRate = _originationFeeRate;\\n\\n        emit UpdateOriginationFeeRate(_originationFeeRate);\\n    }\\n\\n    /**\\n     * @notice updates the percent improvement required of at least one loan term when underwriting \\n     * a loan that already has a lender. E.g. setting this value to 10 means duration or amount\\n     * must be 10% higher or interest rate must be 10% lower. \\n     */\\n    function updateRequiredImprovementPercentage(uint256 _improvementPercentage) onlyOwner external {\\n        requiredImprovementPercentage = _improvementPercentage;\\n\\n        emit UpdateRequiredImprovementPercent(_improvementPercentage);\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"contracts/interfaces/INFTLoanFacilitator.sol\":{\"content\":\"pragma solidity 0.8.10;\\n\\ninterface INFTLoanFacilitator {\\n    \\n    /**\\n     * @notice Emitted when the loan is created\\n     * @param id The id of the new loan, matches the token id of the borrow ticket minted in the same transaction\\n     * @param minter msg.sender\\n     * @param collateralTokenId The token id of the collateral NFT\\n     * @param collateralContract The contract address of the collateral NFT\\n     * @param maxInterestRate The max per second interest rate, scaled by SCALAR\\n     * @param loanAssetContract The contract address of the loan asset\\n     * @param minLoanAmount mimimum loan amount\\n     * @param minDurationSeconds minimum loan duration in seconds\\n    */\\n    event CreateLoan(\\n        uint256 indexed id,\\n        address indexed minter,\\n        uint256 collateralTokenId,\\n        address collateralContract,\\n        uint256 maxInterestRate,\\n        address loanAssetContract,\\n        uint256 minLoanAmount,\\n        uint256 minDurationSeconds\\n        );\\n\\n    /** \\n     * @notice Emitted when ticket is closed\\n     * @param id The id of the ticket which has been closed\\n     */\\n    event Close(uint256 indexed id);\\n\\n    /** \\n     * @notice Emitted when the loan is underwritten or re-underwritten\\n     * @param id The id of the ticket which is being underwritten\\n     * @param underwriter msg.sender\\n     * @param interestRate The per second interest rate, scaled by SCALAR, for the loan\\n     * @param loanAmount The loan amount\\n     * @param durationSeconds The loan duration in seconds \\n     */\\n    event UnderwriteLoan(\\n        uint256 indexed id,\\n        address indexed underwriter,\\n        uint256 interestRate,\\n        uint256 loanAmount,\\n        uint256 durationSeconds\\n        );\\n\\n    /**\\n     * @notice Emitted when a loan is being re-underwritten, the current underwriter is being bought out\\n     * @param underwriter msg.sender\\n     * @param replacedLoanOwner The previous underwriter\\n     * @param interestEarned The amount of interest the loan has accrued from first underwrite to this buyout\\n     * @param replacedAmount The loan amount prior to buyout\\n     */    \\n    event BuyoutUnderwriter(\\n        uint256 indexed id,\\n        address indexed underwriter,\\n        address indexed replacedLoanOwner,\\n        uint256 interestEarned,\\n        uint256 replacedAmount\\n        );\\n    \\n    /**\\n     * @notice Emitted when loan is repaid\\n     * @param id The loan id\\n     * @param repayer msg.sender\\n     * @param loanOwner The current holder of the lend ticket for this loan, token id matching the loan id\\n     * @param interestEarned The total interest accumulated on the loan\\n     * @param loanAmount The loan amount\\n     */\\n    event Repay(\\n        uint256 indexed id,\\n        address indexed repayer,\\n        address indexed loanOwner,\\n        uint256 interestEarned,\\n        uint256 loanAmount\\n        );\\n\\n    /**\\n     * @notice Emitted when loan NFT collateral is seized \\n     * @param id The ticket id\\n     */\\n    event SeizeCollateral(uint256 indexed id);\\n\\n     /**\\n      * @notice Emitted when origination fees are withdrawn\\n      * @dev only owner can call\\n      * @param asset the ERC20 asset withdrawn\\n      * @param amount the amount withdrawn\\n      * @param to the address the withdrawn amount was sent to\\n      */\\n     event WithdrawOriginationFees(address asset, uint256 amount, address to);\\n\\n      /**\\n      * @notice Emitted when originationFeeRate is updated\\n      * @dev only owner can call, value is scaled by SCALAR, 100% = SCALAR\\n      * @param feeRate the new origination fee rate\\n      */\\n     event UpdateOriginationFeeRate(uint32 feeRate);\\n\\n     /**\\n      * @notice Emitted when requiredImprovementPercent is updated\\n      * @dev only owner can call, 1 = 1%\\n      * @param improvementPercent the new required improvementPercent\\n      */\\n     event UpdateRequiredImprovementPercent(uint256 improvementPercent);\\n\\n    /**\\n     * @notice The magnitude of SCALAR\\n     * @dev 10^INTEREST_RATE_DECIMALS = 1 = 100%\\n     */\\n    function INTEREST_RATE_DECIMALS() external returns (uint8);\\n\\n    /**\\n     * @notice The percent of the loan amount that the facilitator will take as a fee, scaled by SCALAR\\n     * @dev Starts set to 1%. Can only be set to 0 - 5%. \\n     */\\n    function originationFeeRate() external returns (uint32);\\n    \\n    /**\\n     * @notice The SCALAR for all percentages in the loan facilitator contract\\n     * @dev Any interest rate passed to a function should already been multiplied by SCALAR\\n     */\\n    function SCALAR() external returns (uint40);\\n\\n    /**\\n     * @notice The lend ticket contract associated with this loan faciliator\\n     * @dev Once set, cannot be modified\\n     */\\n    function lendTicketContract() external returns (address);\\n\\n    /**\\n     * @notice The borrow ticket contract associated with this loan faciliator\\n     * @dev Once set, cannot be modified\\n     */\\n    function borrowTicketContract() external returns (address);\\n\\n    /**\\n     * @notice The percent improvement required of at least one loan term when underwriting \\n     * a loan that already has a lender. E.g. setting this value to 10 means duration or amount\\n     * must be 10% higher or interest rate must be 10% lower.\\n     * @dev Starts at 10. Only owner can set.\\n     */\\n    function requiredImprovementPercentage() external returns (uint256);\\n\\n    /**\\n     * @notice returns the info for this loan\\n     * @param loanId The id of the loan\\n     * @return closed Whether or not the ticket is closed\\n     * @return perSecondInterestRate The per second interest rate, scaled by SCALAR\\n     * @return accumulatedInterest The amount of interest accumulated on the loan prior to the current underwriter\\n     * @return lastAccumulatedTimestamp The timestamp (in seconds) when interest was last accumulated, \\n     * i.e. the timestamp of the most recent underwriting\\n     * @return collateralContractAddress The contract address of the NFT collateral \\n     * @return loanAssetContractAddress The contract address of the loan asset.\\n     * @return durationSeconds The loan duration in seconds\\n     * @return loanAmount The loan amount\\n     * @return collateralTokenId The token ID of the NFT collateral\\n     */\\n    function loanInfo(uint256 loanId)\\n    external view \\n    returns (\\n        bool closed,\\n        uint16 perSecondInterestRate,\\n        uint32 accumulatedInterest,\\n        uint40 lastAccumulatedTimestamp,\\n        address collateralContractAddress,\\n        address loanAssetContractAddress,\\n        uint256 durationSeconds,\\n        uint256 loanAmount,\\n        uint256 collateralTokenId\\n        );\\n\\n    /**\\n     * @notice returns the total amount owed for the loan, i.e. principal + interest\\n     * @param loanId The loan id\\n     */\\n    function totalOwed(uint256 loanId) view external returns (uint256);\\n\\n    /**\\n     * @notice returns the interest owed on the loan, in loan asset units\\n     * @param loanId The loan id\\n     */\\n    function interestOwed(uint256 loanId) view external returns (uint256);\\n\\n    /**\\n     * @notice returns the unix timestamp (seconds) of the loan end\\n     * @param loanId The loan id\\n     */\\n    function loanEndSeconds(uint256 loanId) view external returns (uint256);\\n\\n    /**\\n     * @notice (1) transfers the collateral NFT to the loan facilitator contract \\n     * (2) creates the loan, populating loanInfo in the facilitator contract,\\n     * and (3) mints a Borrow Ticket to mintBorrowTicketTo\\n     * @param collateralTokenId The token id of the collateral NFT \\n     * @param collateralContractAddress The contract address of the collateral NFT\\n     * @param maxPerSecondInterest The maximum per second interest rate for this loan, scaled by SCALAR\\n     * @param minLoanAmount The minimum acceptable loan amount for this loan\\n     * @param loanAssetContractAddress The address of the loan asset\\n     * @param minDurationSeconds The minimum duration for this loan\\n     * @param mintBorrowTicketTo An address to mint the Borrow Ticket corresponding to this loan to\\n     * @return id of the created loan\\n     */\\n    function createLoan(\\n            uint256 collateralTokenId,\\n            address collateralContractAddress,\\n            uint16 maxPerSecondInterest,\\n            uint256 minLoanAmount,\\n            address loanAssetContractAddress,\\n            uint32 minDurationSeconds,\\n            address mintBorrowTicketTo\\n        ) \\n        external\\n        returns(uint256 id);\\n\\n    /**\\n     * @notice Closes the loan, sends the NFT collateral to sendCollateralTo\\n     * @dev Can only be called by the holder of the Borrow Ticket with tokenId\\n     * matching the loanId. Can only be called if loan has not be underwritten,\\n     * i.e. lastAccumulatedInterestTimestamp = 0\\n     * @param loanId The loan id\\n     * @param sendCollateralTo The address to send the collateral NFT to\\n     */\\n    function closeLoan(uint256 loanId, address sendCollateralTo) external;\\n\\n    /**\\n     * @notice Underwrites the loan, transferring `amount` of the loan asset \\n     * to the facilitator contract. If the loan has not yet been underwritten, \\n     * a Lend Ticket is minted to `sendLendTicketTo`. If the loan has already been \\n     * underwritten, then this is a buyout, and the Lend Ticket will be transferred\\n     * from the current holder to `sendLendTicketTo`. Also in the case of a buyout, interestOwed()\\n     * is transferred from the caller to the facilitator contract, in addition to `amount`, and\\n     * totalOwed() is paid to the current Lend Ticket holder.\\n     * @dev Loan terms must meet or beat loan terms. If a buyout, at least one loan term\\n     * must be improved by at least 10%. E.g. 10% longer duration, 10% lower interest, \\n     * 10% higher amount\\n     * @param loanId The loan id\\n     * @param interestRate The per second interest rate, scaled by SCALAR\\n     * @param amount The loan amount\\n     * @param durationSeconds The loan duration in seconds\\n     * @param sendLendTicketTo The address to send the Lend Ticket to\\n     */\\n    function underwriteLoan(\\n            uint256 loanId,\\n            uint16 interestRate,\\n            uint256 amount,\\n            uint32 durationSeconds,\\n            address sendLendTicketTo\\n        ) \\n        external;\\n\\n    /**\\n     * @notice repays and closes the loan, transferring totalOwed() to the current Lend Ticket holder\\n     * and transferring the collateral NFT to the Borrow Ticket holder.\\n     * @param loanId The loan id\\n     */\\n    function repayAndCloseLoan(uint256 loanId) external;\\n\\n    /**\\n     * @notice Transfers the collateral NFT to `sendCollateralTo` and closes the loan.\\n     * @dev Can only be called by Lend Ticket holder. Can only be called \\n     * if block.timestamp > loanEndSeconds()\\n     * @param loanId The loan id\\n     * @param sendCollateralTo The address to send the collateral NFT to\\n     */\\n    function seizeCollateral(uint256 loanId, address sendCollateralTo) external;\\n}\"},\"contracts/interfaces/IERC721Mintable.sol\":{\"content\":\"pragma solidity 0.8.10;\\n\\ninterface IERC721Mintable {\\n    /**\\n     * @notice mints an ERC721 token of tokenId to the to address\\n     * @dev only callable by nft loan facilitator\\n     * @param to The address to send the token to\\n     * @param tokenId The id of the token to mint\\n     */\\n    function mint(address to, uint256 tokenId) external;\\n}\"},\"contracts/interfaces/ILendTicket.sol\":{\"content\":\"pragma solidity 0.8.10;\\n\\ninterface ILendTicket {\\n    /**\\n     * @notice Transfers a lend ticket\\n     * @dev can only be called by nft loan facilitator\\n     * @param from The current holder of the lend ticket\\n     * @param to Address to send the lend ticket to\\n     * @param loanId The lend ticket token id, which is also the loan id in the facilitator contract\\n     */\\n    function loanFacilitatorTransfer(address from, address to, uint256 loanId) external;\\n}\"}}}","address":"0x9231Bec810d6607b952B9227A9b0f85b87172aF4","bytecode":"0x6080604052620000126002600a62000175565b6200001f90600a620002c7565b600060146101000a81548163ffffffff021916908363ffffffff160217905550600a6003553480156200005157600080fd5b506040516200363338038062003633833981016040819052620000749162000323565b600080546001600160a01b0319163390811782556040519091829160008051602062003613833981519152908290a350620000af81620000b6565b50620003d6565b6000546001600160a01b03163314620000ec5760405162461bcd60e51b8152600401620000e39062000350565b60405180910390fd5b6001600160a01b038116620001155760405162461bcd60e51b8152600401620000e3906200038b565b600080546040516001600160a01b03808516939216916000805160206200361383398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b634e487b7160e01b600052601160045260246000fd5b60ff91821691166000828210156200019157620001916200015f565b500390565b80825b6001851115620001dc57808604811115620001b857620001b86200015f565b6001851615620001c757908102905b8002620001d48560011c90565b945062000199565b94509492505050565b600082620001f657506001620002c0565b816200020557506000620002c0565b81600181146200021e576002811462000229576200025d565b6001915050620002c0565b60ff8411156200023d576200023d6200015f565b8360020a9150848211156200025657620002566200015f565b50620002c0565b5060208310610133831016604e8410600b841016171562000295575081810a838111156200028f576200028f6200015f565b620002c0565b620002a4848484600162000196565b92509050818404811115620002bd57620002bd6200015f565b81025b9392505050565b63ffffffff8116905060ff821691506000620002c063ffffffff8484620001e5565b60006001600160a01b0382165b92915050565b6200030781620002e9565b81146200031357600080fd5b50565b8051620002f681620002fc565b6000602082840312156200033a576200033a600080fd5b600062000348848462000316565b949350505050565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604083015260608201620002f6565b60208082528101620002f681602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201526564647265737360d01b604082015260600190565b61322d80620003e66000396000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c806367cec5a3116100e35780638349d6be1161008c578063ac9cf4db11610066578063ac9cf4db1461041f578063e926e9af14610432578063f2fde38b1461044557600080fd5b80638349d6be146103db5780638da5cb5b146103ee578063a27158d71461040c57600080fd5b80637321e353116100bd5780637321e353146103955780637af26c1f146103a85780637e8400b2146103c857600080fd5b806367cec5a31461034b5780636bf301a414610378578063715018a61461038d57600080fd5b80633b817496116101455780635ecd21731161011f5780635ecd217314610310578063654ea0981461032357806366234ffa1461033657600080fd5b80633b817496146102b55780633e117ec9146102ea5780633f581848146102fd57600080fd5b80632a16654a116101765780632a16654a14610284578063300ed99b1461028d57806337bb105c146102a257600080fd5b806310780bed1461019d5780631b58b609146101c65780631d4598f014610271575b600080fd5b6101b06101ab366004612512565b610458565b6040516101bd9190612543565b60405180910390f35b61025c6101d4366004612512565b60046020819052600091825260409091208054600182015460028301546003840154939094015460ff83169461ffff6101008504169463ffffffff63010000008604169464ffffffffff6701000000000000008204169473ffffffffffffffffffffffffffffffffffffffff6c01000000000000000000000000909204821694911692919089565b6040516101bd999897969594939291906125a3565b6101b061027f366004612669565b6104e7565b6101b060035481565b6102a061029b366004612708565b610826565b005b6102a06102b0366004612729565b61095a565b6000546102dd9074010000000000000000000000000000000000000000900463ffffffff1681565b6040516101bd919061274a565b6102a06102f8366004612758565b610a42565b6102a061030b366004612729565b611328565b6101b061031e366004612512565b611410565b6102a06103313660046127d0565b6114bd565b61033e600a81565b6040516101bd9190612829565b60015461036b9073ffffffffffffffffffffffffffffffffffffffff1681565b6040516101bd9190612837565b61038061156f565b6040516101bd9190612845565b6102a061157d565b6102a06103a3366004612512565b61163d565b60025461036b9073ffffffffffffffffffffffffffffffffffffffff1681565b6102a06103d6366004612853565b6116c3565b61025c6103e9366004612512565b611942565b60005473ffffffffffffffffffffffffffffffffffffffff1661036b565b6102a061041a366004612512565b611a8a565b6102a061042d366004612853565b611dfc565b6101b0610440366004612512565b6120c5565b6102a0610453366004612729565b61218d565b6000805482907801000000000000000000000000000000000000000000000000900467ffffffffffffffff168111156104c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906128ea565b60405180910390fd5b60008381526004602052604090206104dd816122b8565b9250505b50919050565b60015460009073ffffffffffffffffffffffffffffffffffffffff888116911614801590610530575060025473ffffffffffffffffffffffffffffffffffffffff888116911614155b610566576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612952565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8816906323b872dd906105bc90339030908d90600401612962565b600060405180830381600087803b1580156105d657600080fd5b505af11580156105ea573d6000803e3d6000fd5b505050506000601881819054906101000a900467ffffffffffffffff16610610906129b9565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905567ffffffffffffffff1690506000600460008381526020019081526020016000209050848160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508581600301819055508881600401819055508781600001600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550868160000160016101000a81548161ffff021916908361ffff160217905550838160000160036101000a81548163ffffffff021916908363ffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984846040518363ffffffff1660e01b815260040161078f9291906129e7565b600060405180830381600087803b1580156107a957600080fd5b505af11580156107bd573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff16827ffdaefc42969fb3fa46e66478273186d5b076bf2e0ee15e142737dfc062015d0a8b8b8b8a8c8b60405161081296959493929190612a40565b60405180910390a350979650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610877576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612acc565b6108836002600a612adc565b61088e90600a612c0c565b610899906005612c3f565b8163ffffffff1611156108d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612cae565b600080547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff8416021790556040517f5318780da42901eb551b3beab1953fa2673bf9592c023ed47f8929cfd705a4269061094f90839061274a565b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612acc565b60025473ffffffffffffffffffffffffffffffffffffffff16156109fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612cf0565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005485907801000000000000000000000000000000000000000000000000900467ffffffffffffffff16811115610aa6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906128ea565b600086815260046020526040902054869060ff1615610af1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612d32565b6000878152600460205260409020805461ffff8089166101009092041610801590610b2d5750805463ffffffff80871663010000009092041611155b8015610b3d575085816003015411155b610b73576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612d9a565b8054670100000000000000900464ffffffffff16610e035780547fffffffffffffffffffffffffffffffffffffffff0000000000ffffffff0000ff1661010061ffff8916027fffffffffffffffffffffffffffffffffffffffff0000000000ffffffffffffff16176701000000000000004264ffffffffff1602177fffffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffff16630100000063ffffffff87811691909102919091178255600382018790556001820154610c5c9173ffffffffffffffffffffffffffffffffffffffff90911690339030908a9061235916565b6000610c69600a80612daa565b60005464ffffffffff9190911690610c9f9074010000000000000000000000000000000000000000900463ffffffff1689612c3f565b610ca99190612dfb565b6002546040517f6352211e000000000000000000000000000000000000000000000000000000008152919250610d739173ffffffffffffffffffffffffffffffffffffffff90911690636352211e90610d06908d90600401612543565b602060405180830381865afa158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d479190612e1a565b610d51838a612e3b565b600185015473ffffffffffffffffffffffffffffffffffffffff169190612413565b6001546040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906340c10f1990610dcb9088908d906004016129e7565b600060405180830381600087803b158015610de557600080fd5b505af1158015610df9573d6000803e3d6000fd5b50505050506112cb565b6000816003015487610e159190612e3b565b90508060646003548460030154610e2c9190612c3f565b610e369190612dfb565b111580610e875750600354825463ffffffff80891692606492610e6192630100000090910416612c3f565b610e6b9190612dfb565b8354610e8491906301000000900463ffffffff16612e41565b11155b80610ece5750600354825461ffff808b1692606492610eac9261010090910416612c3f565b610eb69190612dfb565b8354610ecb9190610100900461ffff16612e3b565b10155b610f04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612e59565b6000610f0f836122b8565b9050600083600301549050898460000160016101000a81548161ffff021916908361ffff160217905550428460000160076101000a81548164ffffffffff021916908364ffffffffff160217905550878460000160036101000a81548163ffffffff021916908363ffffffff1602179055508884600301819055508184600201819055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8d6040518263ffffffff1660e01b8152600401610ff09190612543565b602060405180830381865afa15801561100d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110319190612e1a565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a236897a828a8f6040518463ffffffff1660e01b815260040161109293929190612962565b600060405180830381600087803b1580156110ac57600080fd5b505af11580156110c0573d6000803e3d6000fd5b50505050600084111561124f576110ff33306110dc868e612e41565b600189015473ffffffffffffffffffffffffffffffffffffffff16929190612359565b61112f8161110d8486612e41565b600188015473ffffffffffffffffffffffffffffffffffffffff169190612413565b600061113c600a80612daa565b60005464ffffffffff91909116906111729074010000000000000000000000000000000000000000900463ffffffff1687612c3f565b61117c9190612dfb565b9050611249600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8f6040518263ffffffff1660e01b81526004016111dc9190612543565b602060405180830381865afa1580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d9190612e1a565b6112278388612e3b565b600189015473ffffffffffffffffffffffffffffffffffffffff169190612413565b5061125e565b61125e33826110dc8587612e41565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168d7f4426c7953fce0ff3ee8d5ae131fe344a6368710c93a44ea34eff98a0a2eb823a86866040516112be929190612ee0565b60405180910390a4505050505b3373ffffffffffffffffffffffffffffffffffffffff16887f196faa84e8e25ea2d752848d95baeaad64525fc89c6b17b07d8cdaf9d402c3e889898960405161131693929190612eee565b60405180910390a35050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611379576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612acc565b60015473ffffffffffffffffffffffffffffffffffffffff16156113c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612cf0565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000805482907801000000000000000000000000000000000000000000000000900467ffffffffffffffff16811115611475576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906128ea565b600083815260046020526040902080546114ae90670100000000000000810464ffffffffff16906301000000900463ffffffff16612f16565b64ffffffffff16949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461150e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612acc565b61152f73ffffffffffffffffffffffffffffffffffffffff84168284612413565b7fa8790deb319345e298343f10ed7d6a75b74909da42818501958de9e08f73869e83838360405161156293929190612f43565b60405180910390a1505050565b61157a600a80612daa565b81565b60005473ffffffffffffffffffffffffffffffffffffffff1633146115ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612acc565b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461168e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612acc565b60038190556040517f75bd931ccd1896bc4464c9566912bbf63a6def7b3bc38cdcb97caaf7ea6e87ec9061094f908390612543565b600082815260046020526040902054829060ff161561170e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612d32565b6002546040517f6352211e000000000000000000000000000000000000000000000000000000008152339173ffffffffffffffffffffffffffffffffffffffff1690636352211e90611764908790600401612543565b602060405180830381865afa158015611781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a59190612e1a565b73ffffffffffffffffffffffffffffffffffffffff16146117f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612fc3565b60008381526004602052604090208054670100000000000000900464ffffffffff161561184b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd9061302b565b805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909116178082556004808301546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526c0100000000000000000000000090930473ffffffffffffffffffffffffffffffffffffffff16926323b872dd926118df923092899201612962565b600060405180830381600087803b1580156118f957600080fd5b505af115801561190d573d6000803e3d6000fd5b50506040518692507fbf67515a38ee520223d32c1266d52101c30d936ed1f3e436c8caeb0a43cb06bf9150600090a250505050565b600080600080600080600080600089600060189054906101000a900467ffffffffffffffff1667ffffffffffffffff168111156119ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906128ea565b5050506000978852505060046020818152604097889020885161012081018a52815460ff8116151580835261010080830461ffff169584018690526301000000830463ffffffff169c84018d9052670100000000000000830464ffffffffff16606085018190526c0100000000000000000000000090930473ffffffffffffffffffffffffffffffffffffffff90811660808601819052600187015490911660a08601819052600287015460c08701819052600388015460e08801819052979099015492909501829052919d959c9b5091995097509095509293509190565b60005481907801000000000000000000000000000000000000000000000000900467ffffffffffffffff16811115611aee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906128ea565b600082815260046020526040902054829060ff1615611b39576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612d32565b600083815260046020526040812090611b51826122b8565b6001546040517f6352211e00000000000000000000000000000000000000000000000000000000815291925060009173ffffffffffffffffffffffffffffffffffffffff90911690636352211e90611bad908990600401612543565b602060405180830381865afa158015611bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bee9190612e1a565b83547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011784556003840154909150611c549033908390611c319086612e41565b600187015473ffffffffffffffffffffffffffffffffffffffff16929190612359565b82546002546040517f6352211e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6c010000000000000000000000009093048316926323b872dd923092911690636352211e90611cc7908c90600401612543565b602060405180830381865afa158015611ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d089190612e1a565b86600401546040518463ffffffff1660e01b8152600401611d2b93929190612962565b600060405180830381600087803b158015611d4557600080fd5b505af1158015611d59573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16877f9181b2981704b7cf4448130f29cb5da1f41e0418d000e7f8880000b09bcbea45858760030154604051611dc1929190612ee0565b60405180910390a460405186907fbf67515a38ee520223d32c1266d52101c30d936ed1f3e436c8caeb0a43cb06bf90600090a2505050505050565b600082815260046020526040902054829060ff1615611e47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612d32565b6001546040517f6352211e000000000000000000000000000000000000000000000000000000008152339173ffffffffffffffffffffffffffffffffffffffff1690636352211e90611e9d908790600401612543565b602060405180830381865afa158015611eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ede9190612e1a565b73ffffffffffffffffffffffffffffffffffffffff1614611f2b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90613093565b60008381526004602052604090208054611f6490670100000000000000810464ffffffffff16906301000000900463ffffffff16612f16565b64ffffffffff164211611fa3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906130fb565b805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909116178082556004808301546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526c0100000000000000000000000090930473ffffffffffffffffffffffffffffffffffffffff16926323b872dd92612037923092899201612962565b600060405180830381600087803b15801561205157600080fd5b505af1158015612065573d6000803e3d6000fd5b50506040518692507f19f0d220035b967365e70d19ca7093af2e75a9741c08ef27c5017d6f463febd99150600090a260405184907fbf67515a38ee520223d32c1266d52101c30d936ed1f3e436c8caeb0a43cb06bf90600090a250505050565b6000805482907801000000000000000000000000000000000000000000000000900467ffffffffffffffff1681111561212a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906128ea565b6000838152600460205260409020805460ff168061215957508054670100000000000000900464ffffffffff16155b156121685760009250506104e1565b612171816122b8565b6000858152600460205260409020600301546104dd9190612e41565b60005473ffffffffffffffffffffffffffffffffffffffff1633146121de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612acc565b73ffffffffffffffffffffffffffffffffffffffff811661222b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90613163565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b805460009060ff16806122dc57508154670100000000000000900464ffffffffff16155b156122e957506000919050565b60028201546122f9600a80612daa565b835464ffffffffff9182169161ffff61010083041691612326916701000000000000009091041642612e3b565b85600301546123359190612c3f565b61233f9190612c3f565b6123499190612dfb565b6123539190612e41565b92915050565b60006040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff8416602482015282604482015260008060648360008a5af19150506123d6816124b0565b61240c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906131a5565b5050505050565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201528260248201526000806044836000895af1915050612474816124b0565b6124aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906131e7565b50505050565b60003d826124c257806000803e806000fd5b80602081146124da5780156124eb57600092506124f0565b816000803e600051151592506124f0565b600192505b5050919050565b805b811461250457600080fd5b50565b8035612353816124f7565b60006020828403121561252757612527600080fd5b60006125338484612507565b949350505050565b805b82525050565b60208101612353828461253b565b80151561253d565b61ffff811661253d565b63ffffffff811661253d565b64ffffffffff811661253d565b600073ffffffffffffffffffffffffffffffffffffffff8216612353565b61253d8161257c565b61012081016125b2828c612551565b6125bf602083018b612559565b6125cc604083018a612563565b6125d9606083018961256f565b6125e6608083018861259a565b6125f360a083018761259a565b61260060c083018661253b565b61260d60e083018561253b565b61261b61010083018461253b565b9a9950505050505050505050565b6124f98161257c565b803561235381612629565b61ffff81166124f9565b80356123538161263d565b63ffffffff81166124f9565b803561235381612652565b600080600080600080600060e0888a03121561268757612687600080fd5b60006126938a8a612507565b97505060206126a48a828b01612632565b96505060406126b58a828b01612647565b95505060606126c68a828b01612507565b94505060806126d78a828b01612632565b93505060a06126e88a828b0161265e565b92505060c06126f98a828b01612632565b91505092959891949750929550565b60006020828403121561271d5761271d600080fd5b6000612533848461265e565b60006020828403121561273e5761273e600080fd5b60006125338484612632565b602081016123538284612563565b600080600080600060a0868803121561277357612773600080fd5b600061277f8888612507565b955050602061279088828901612647565b94505060406127a188828901612507565b93505060606127b28882890161265e565b92505060806127c388828901612632565b9150509295509295909350565b6000806000606084860312156127e8576127e8600080fd5b60006127f48686612632565b935050602061280586828701612507565b925050604061281686828701612632565b9150509250925092565b60ff811661253d565b602081016123538284612820565b60208101612353828461259a565b60208101612353828461256f565b6000806040838503121561286957612869600080fd5b60006128758585612507565b925050602061288685828601612632565b9150509250929050565b60278152602081017f4e46544c6f616e466163696c697461746f723a206c6f616e20646f6573206e6f81527f7420657869737400000000000000000000000000000000000000000000000000602082015290505b60400190565b6020808252810161235381612890565b60348152602081017f4e46544c6f616e466163696c697461746f723a2063616e6e6f7420757365207481527f69636b65747320617320636f6c6c61746572616c000000000000000000000000602082015290506128e4565b60208082528101612353816128fa565b60608101612970828661259a565b61297d602083018561259a565b612533604083018461253b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b67ffffffffffffffff81169050600067ffffffffffffffff8214156129e0576129e061298a565b5060010190565b604081016129f5828561259a565b612a02602083018461253b565b9392505050565b6000612353612a1961ffff841681565b90565b61253d81612a09565b6000612353612a1963ffffffff841681565b61253d81612a25565b60c08101612a4e828961253b565b612a5b602083018861259a565b612a686040830187612a1c565b612a75606083018661259a565b612a82608083018561253b565b612a8f60a0830184612a37565b979650505050505050565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b6020808252810161235381612a9a565b60ff9081169082165b9150600082821015612af957612af961298a565b500390565b80825b6001851115612b3d57808604811115612b1c57612b1c61298a565b6001851615612b2a57908102905b8002612b368560011c90565b9450612b01565b94509492505050565b600082612b5557506001612a02565b81612b6257506000612a02565b8160018114612b785760028114612b8257612baf565b6001915050612a02565b60ff841115612b9357612b9361298a565b8360020a915084821115612ba957612ba961298a565b50612a02565b5060208310610133831016604e8410600b8410161715612be2575081810a83811115612bdd57612bdd61298a565b612a02565b612bef8484846001612afe565b92509050818404811115612c0557612c0561298a565b0292915050565b60ff821691506000612a027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612b46565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c7757612c7761298a565b500290565b601e8152602081017f4e46544c6f616e466163696c697461746f723a206d617820666565203525000081529050612ac6565b6020808252810161235381612c7c565b601f8152602081017f4e46544c6f616e466163696c697461746f723a20616c7265616479207365740081529050612ac6565b6020808252810161235381612cbe565b601f8152602081017f4e46544c6f616e466163696c697461746f723a206c6f616e20636c6f7365640081529050612ac6565b6020808252810161235381612d00565b60318152602081017f4e46544c6f616e466163696c697461746f723a2050726f706f7365642074657281527f6d7320646f206e6f74207175616c696679000000000000000000000000000000602082015290506128e4565b6020808252810161235381612d42565b64ffffffffff8116905060ff821691506000612a0264ffffffffff8484612b46565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082612e0a57612e0a612dcc565b500490565b805161235381612629565b600060208284031215612e2f57612e2f600080fd5b60006125338484612e0f565b81612ae5565b60008219821115612e5457612e5461298a565b500190565b6020808252810161235381604581527f4e46544c6f616e466163696c697461746f723a2070726f706f7365642074657260208201527f6d73206d75737420626520626574746572207468616e206578697374696e672060408201527f7465726d73000000000000000000000000000000000000000000000000000000606082015260800190565b604081016129f5828561253b565b60608101612efc8286612a1c565b612f09602083018561253b565b6125336040830184612a37565b64ffffffffff8116905064ffffffffff8216915060008264ffffffffff03821115612e5457612e5461298a565b60608101612f51828661259a565b612f5e602083018561253b565b612533604083018461259a565b60218152602081017f4e46544c6f616e466163696c697461746f723a20626f72726f776572206f6e6c81527f7900000000000000000000000000000000000000000000000000000000000000602082015290506128e4565b6020808252810161235381612f6b565b60378152602081017f4e46544c6f616e466163696c697461746f723a20756e6465727772697474656e81527f2c20757365207265706179416e64436c6f73654c6f616e000000000000000000602082015290506128e4565b6020808252810161235381612fd3565b60248152602081017f4e46544c6f616e466163696c697461746f723a20756e6465727772697465722081527f6f6e6c7900000000000000000000000000000000000000000000000000000000602082015290506128e4565b602080825281016123538161303b565b60278152602081017f4e46544c6f616e466163696c697461746f723a207061796d656e74206973206e81527f6f74206c61746500000000000000000000000000000000000000000000000000602082015290506128e4565b60208082528101612353816130a3565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290506128e4565b602080825281016123538161310b565b60148152602081017f5452414e534645525f46524f4d5f4641494c454400000000000000000000000081529050612ac6565b6020808252810161235381613173565b600f8152602081017f5452414e534645525f4641494c4544000000000000000000000000000000000081529050612ac6565b60208082528101612353816131b556fea26469706673582212202b29a83e853222aea0c1c5380f1bb5a0d12f4b459080ac2d2e71450ec9b5d40c64736f6c634300080a00338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101985760003560e01c806367cec5a3116100e35780638349d6be1161008c578063ac9cf4db11610066578063ac9cf4db1461041f578063e926e9af14610432578063f2fde38b1461044557600080fd5b80638349d6be146103db5780638da5cb5b146103ee578063a27158d71461040c57600080fd5b80637321e353116100bd5780637321e353146103955780637af26c1f146103a85780637e8400b2146103c857600080fd5b806367cec5a31461034b5780636bf301a414610378578063715018a61461038d57600080fd5b80633b817496116101455780635ecd21731161011f5780635ecd217314610310578063654ea0981461032357806366234ffa1461033657600080fd5b80633b817496146102b55780633e117ec9146102ea5780633f581848146102fd57600080fd5b80632a16654a116101765780632a16654a14610284578063300ed99b1461028d57806337bb105c146102a257600080fd5b806310780bed1461019d5780631b58b609146101c65780631d4598f014610271575b600080fd5b6101b06101ab366004612512565b610458565b6040516101bd9190612543565b60405180910390f35b61025c6101d4366004612512565b60046020819052600091825260409091208054600182015460028301546003840154939094015460ff83169461ffff6101008504169463ffffffff63010000008604169464ffffffffff6701000000000000008204169473ffffffffffffffffffffffffffffffffffffffff6c01000000000000000000000000909204821694911692919089565b6040516101bd999897969594939291906125a3565b6101b061027f366004612669565b6104e7565b6101b060035481565b6102a061029b366004612708565b610826565b005b6102a06102b0366004612729565b61095a565b6000546102dd9074010000000000000000000000000000000000000000900463ffffffff1681565b6040516101bd919061274a565b6102a06102f8366004612758565b610a42565b6102a061030b366004612729565b611328565b6101b061031e366004612512565b611410565b6102a06103313660046127d0565b6114bd565b61033e600a81565b6040516101bd9190612829565b60015461036b9073ffffffffffffffffffffffffffffffffffffffff1681565b6040516101bd9190612837565b61038061156f565b6040516101bd9190612845565b6102a061157d565b6102a06103a3366004612512565b61163d565b60025461036b9073ffffffffffffffffffffffffffffffffffffffff1681565b6102a06103d6366004612853565b6116c3565b61025c6103e9366004612512565b611942565b60005473ffffffffffffffffffffffffffffffffffffffff1661036b565b6102a061041a366004612512565b611a8a565b6102a061042d366004612853565b611dfc565b6101b0610440366004612512565b6120c5565b6102a0610453366004612729565b61218d565b6000805482907801000000000000000000000000000000000000000000000000900467ffffffffffffffff168111156104c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906128ea565b60405180910390fd5b60008381526004602052604090206104dd816122b8565b9250505b50919050565b60015460009073ffffffffffffffffffffffffffffffffffffffff888116911614801590610530575060025473ffffffffffffffffffffffffffffffffffffffff888116911614155b610566576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612952565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8816906323b872dd906105bc90339030908d90600401612962565b600060405180830381600087803b1580156105d657600080fd5b505af11580156105ea573d6000803e3d6000fd5b505050506000601881819054906101000a900467ffffffffffffffff16610610906129b9565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905567ffffffffffffffff1690506000600460008381526020019081526020016000209050848160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508581600301819055508881600401819055508781600001600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550868160000160016101000a81548161ffff021916908361ffff160217905550838160000160036101000a81548163ffffffff021916908363ffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984846040518363ffffffff1660e01b815260040161078f9291906129e7565b600060405180830381600087803b1580156107a957600080fd5b505af11580156107bd573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff16827ffdaefc42969fb3fa46e66478273186d5b076bf2e0ee15e142737dfc062015d0a8b8b8b8a8c8b60405161081296959493929190612a40565b60405180910390a350979650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610877576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612acc565b6108836002600a612adc565b61088e90600a612c0c565b610899906005612c3f565b8163ffffffff1611156108d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612cae565b600080547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff8416021790556040517f5318780da42901eb551b3beab1953fa2673bf9592c023ed47f8929cfd705a4269061094f90839061274a565b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612acc565b60025473ffffffffffffffffffffffffffffffffffffffff16156109fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612cf0565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005485907801000000000000000000000000000000000000000000000000900467ffffffffffffffff16811115610aa6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906128ea565b600086815260046020526040902054869060ff1615610af1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612d32565b6000878152600460205260409020805461ffff8089166101009092041610801590610b2d5750805463ffffffff80871663010000009092041611155b8015610b3d575085816003015411155b610b73576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612d9a565b8054670100000000000000900464ffffffffff16610e035780547fffffffffffffffffffffffffffffffffffffffff0000000000ffffffff0000ff1661010061ffff8916027fffffffffffffffffffffffffffffffffffffffff0000000000ffffffffffffff16176701000000000000004264ffffffffff1602177fffffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffff16630100000063ffffffff87811691909102919091178255600382018790556001820154610c5c9173ffffffffffffffffffffffffffffffffffffffff90911690339030908a9061235916565b6000610c69600a80612daa565b60005464ffffffffff9190911690610c9f9074010000000000000000000000000000000000000000900463ffffffff1689612c3f565b610ca99190612dfb565b6002546040517f6352211e000000000000000000000000000000000000000000000000000000008152919250610d739173ffffffffffffffffffffffffffffffffffffffff90911690636352211e90610d06908d90600401612543565b602060405180830381865afa158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d479190612e1a565b610d51838a612e3b565b600185015473ffffffffffffffffffffffffffffffffffffffff169190612413565b6001546040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906340c10f1990610dcb9088908d906004016129e7565b600060405180830381600087803b158015610de557600080fd5b505af1158015610df9573d6000803e3d6000fd5b50505050506112cb565b6000816003015487610e159190612e3b565b90508060646003548460030154610e2c9190612c3f565b610e369190612dfb565b111580610e875750600354825463ffffffff80891692606492610e6192630100000090910416612c3f565b610e6b9190612dfb565b8354610e8491906301000000900463ffffffff16612e41565b11155b80610ece5750600354825461ffff808b1692606492610eac9261010090910416612c3f565b610eb69190612dfb565b8354610ecb9190610100900461ffff16612e3b565b10155b610f04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612e59565b6000610f0f836122b8565b9050600083600301549050898460000160016101000a81548161ffff021916908361ffff160217905550428460000160076101000a81548164ffffffffff021916908364ffffffffff160217905550878460000160036101000a81548163ffffffff021916908363ffffffff1602179055508884600301819055508184600201819055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8d6040518263ffffffff1660e01b8152600401610ff09190612543565b602060405180830381865afa15801561100d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110319190612e1a565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a236897a828a8f6040518463ffffffff1660e01b815260040161109293929190612962565b600060405180830381600087803b1580156110ac57600080fd5b505af11580156110c0573d6000803e3d6000fd5b50505050600084111561124f576110ff33306110dc868e612e41565b600189015473ffffffffffffffffffffffffffffffffffffffff16929190612359565b61112f8161110d8486612e41565b600188015473ffffffffffffffffffffffffffffffffffffffff169190612413565b600061113c600a80612daa565b60005464ffffffffff91909116906111729074010000000000000000000000000000000000000000900463ffffffff1687612c3f565b61117c9190612dfb565b9050611249600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8f6040518263ffffffff1660e01b81526004016111dc9190612543565b602060405180830381865afa1580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d9190612e1a565b6112278388612e3b565b600189015473ffffffffffffffffffffffffffffffffffffffff169190612413565b5061125e565b61125e33826110dc8587612e41565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168d7f4426c7953fce0ff3ee8d5ae131fe344a6368710c93a44ea34eff98a0a2eb823a86866040516112be929190612ee0565b60405180910390a4505050505b3373ffffffffffffffffffffffffffffffffffffffff16887f196faa84e8e25ea2d752848d95baeaad64525fc89c6b17b07d8cdaf9d402c3e889898960405161131693929190612eee565b60405180910390a35050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611379576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612acc565b60015473ffffffffffffffffffffffffffffffffffffffff16156113c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612cf0565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000805482907801000000000000000000000000000000000000000000000000900467ffffffffffffffff16811115611475576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906128ea565b600083815260046020526040902080546114ae90670100000000000000810464ffffffffff16906301000000900463ffffffff16612f16565b64ffffffffff16949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461150e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612acc565b61152f73ffffffffffffffffffffffffffffffffffffffff84168284612413565b7fa8790deb319345e298343f10ed7d6a75b74909da42818501958de9e08f73869e83838360405161156293929190612f43565b60405180910390a1505050565b61157a600a80612daa565b81565b60005473ffffffffffffffffffffffffffffffffffffffff1633146115ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612acc565b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461168e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612acc565b60038190556040517f75bd931ccd1896bc4464c9566912bbf63a6def7b3bc38cdcb97caaf7ea6e87ec9061094f908390612543565b600082815260046020526040902054829060ff161561170e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612d32565b6002546040517f6352211e000000000000000000000000000000000000000000000000000000008152339173ffffffffffffffffffffffffffffffffffffffff1690636352211e90611764908790600401612543565b602060405180830381865afa158015611781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a59190612e1a565b73ffffffffffffffffffffffffffffffffffffffff16146117f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612fc3565b60008381526004602052604090208054670100000000000000900464ffffffffff161561184b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd9061302b565b805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909116178082556004808301546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526c0100000000000000000000000090930473ffffffffffffffffffffffffffffffffffffffff16926323b872dd926118df923092899201612962565b600060405180830381600087803b1580156118f957600080fd5b505af115801561190d573d6000803e3d6000fd5b50506040518692507fbf67515a38ee520223d32c1266d52101c30d936ed1f3e436c8caeb0a43cb06bf9150600090a250505050565b600080600080600080600080600089600060189054906101000a900467ffffffffffffffff1667ffffffffffffffff168111156119ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906128ea565b5050506000978852505060046020818152604097889020885161012081018a52815460ff8116151580835261010080830461ffff169584018690526301000000830463ffffffff169c84018d9052670100000000000000830464ffffffffff16606085018190526c0100000000000000000000000090930473ffffffffffffffffffffffffffffffffffffffff90811660808601819052600187015490911660a08601819052600287015460c08701819052600388015460e08801819052979099015492909501829052919d959c9b5091995097509095509293509190565b60005481907801000000000000000000000000000000000000000000000000900467ffffffffffffffff16811115611aee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906128ea565b600082815260046020526040902054829060ff1615611b39576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612d32565b600083815260046020526040812090611b51826122b8565b6001546040517f6352211e00000000000000000000000000000000000000000000000000000000815291925060009173ffffffffffffffffffffffffffffffffffffffff90911690636352211e90611bad908990600401612543565b602060405180830381865afa158015611bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bee9190612e1a565b83547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011784556003840154909150611c549033908390611c319086612e41565b600187015473ffffffffffffffffffffffffffffffffffffffff16929190612359565b82546002546040517f6352211e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff6c010000000000000000000000009093048316926323b872dd923092911690636352211e90611cc7908c90600401612543565b602060405180830381865afa158015611ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d089190612e1a565b86600401546040518463ffffffff1660e01b8152600401611d2b93929190612962565b600060405180830381600087803b158015611d4557600080fd5b505af1158015611d59573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16877f9181b2981704b7cf4448130f29cb5da1f41e0418d000e7f8880000b09bcbea45858760030154604051611dc1929190612ee0565b60405180910390a460405186907fbf67515a38ee520223d32c1266d52101c30d936ed1f3e436c8caeb0a43cb06bf90600090a2505050505050565b600082815260046020526040902054829060ff1615611e47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612d32565b6001546040517f6352211e000000000000000000000000000000000000000000000000000000008152339173ffffffffffffffffffffffffffffffffffffffff1690636352211e90611e9d908790600401612543565b602060405180830381865afa158015611eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ede9190612e1a565b73ffffffffffffffffffffffffffffffffffffffff1614611f2b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90613093565b60008381526004602052604090208054611f6490670100000000000000810464ffffffffff16906301000000900463ffffffff16612f16565b64ffffffffff164211611fa3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906130fb565b805460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909116178082556004808301546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526c0100000000000000000000000090930473ffffffffffffffffffffffffffffffffffffffff16926323b872dd92612037923092899201612962565b600060405180830381600087803b15801561205157600080fd5b505af1158015612065573d6000803e3d6000fd5b50506040518692507f19f0d220035b967365e70d19ca7093af2e75a9741c08ef27c5017d6f463febd99150600090a260405184907fbf67515a38ee520223d32c1266d52101c30d936ed1f3e436c8caeb0a43cb06bf90600090a250505050565b6000805482907801000000000000000000000000000000000000000000000000900467ffffffffffffffff1681111561212a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906128ea565b6000838152600460205260409020805460ff168061215957508054670100000000000000900464ffffffffff16155b156121685760009250506104e1565b612171816122b8565b6000858152600460205260409020600301546104dd9190612e41565b60005473ffffffffffffffffffffffffffffffffffffffff1633146121de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90612acc565b73ffffffffffffffffffffffffffffffffffffffff811661222b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90613163565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b805460009060ff16806122dc57508154670100000000000000900464ffffffffff16155b156122e957506000919050565b60028201546122f9600a80612daa565b835464ffffffffff9182169161ffff61010083041691612326916701000000000000009091041642612e3b565b85600301546123359190612c3f565b61233f9190612c3f565b6123499190612dfb565b6123539190612e41565b92915050565b60006040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff8416602482015282604482015260008060648360008a5af19150506123d6816124b0565b61240c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906131a5565b5050505050565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201528260248201526000806044836000895af1915050612474816124b0565b6124aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd906131e7565b50505050565b60003d826124c257806000803e806000fd5b80602081146124da5780156124eb57600092506124f0565b816000803e600051151592506124f0565b600192505b5050919050565b805b811461250457600080fd5b50565b8035612353816124f7565b60006020828403121561252757612527600080fd5b60006125338484612507565b949350505050565b805b82525050565b60208101612353828461253b565b80151561253d565b61ffff811661253d565b63ffffffff811661253d565b64ffffffffff811661253d565b600073ffffffffffffffffffffffffffffffffffffffff8216612353565b61253d8161257c565b61012081016125b2828c612551565b6125bf602083018b612559565b6125cc604083018a612563565b6125d9606083018961256f565b6125e6608083018861259a565b6125f360a083018761259a565b61260060c083018661253b565b61260d60e083018561253b565b61261b61010083018461253b565b9a9950505050505050505050565b6124f98161257c565b803561235381612629565b61ffff81166124f9565b80356123538161263d565b63ffffffff81166124f9565b803561235381612652565b600080600080600080600060e0888a03121561268757612687600080fd5b60006126938a8a612507565b97505060206126a48a828b01612632565b96505060406126b58a828b01612647565b95505060606126c68a828b01612507565b94505060806126d78a828b01612632565b93505060a06126e88a828b0161265e565b92505060c06126f98a828b01612632565b91505092959891949750929550565b60006020828403121561271d5761271d600080fd5b6000612533848461265e565b60006020828403121561273e5761273e600080fd5b60006125338484612632565b602081016123538284612563565b600080600080600060a0868803121561277357612773600080fd5b600061277f8888612507565b955050602061279088828901612647565b94505060406127a188828901612507565b93505060606127b28882890161265e565b92505060806127c388828901612632565b9150509295509295909350565b6000806000606084860312156127e8576127e8600080fd5b60006127f48686612632565b935050602061280586828701612507565b925050604061281686828701612632565b9150509250925092565b60ff811661253d565b602081016123538284612820565b60208101612353828461259a565b60208101612353828461256f565b6000806040838503121561286957612869600080fd5b60006128758585612507565b925050602061288685828601612632565b9150509250929050565b60278152602081017f4e46544c6f616e466163696c697461746f723a206c6f616e20646f6573206e6f81527f7420657869737400000000000000000000000000000000000000000000000000602082015290505b60400190565b6020808252810161235381612890565b60348152602081017f4e46544c6f616e466163696c697461746f723a2063616e6e6f7420757365207481527f69636b65747320617320636f6c6c61746572616c000000000000000000000000602082015290506128e4565b60208082528101612353816128fa565b60608101612970828661259a565b61297d602083018561259a565b612533604083018461253b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b67ffffffffffffffff81169050600067ffffffffffffffff8214156129e0576129e061298a565b5060010190565b604081016129f5828561259a565b612a02602083018461253b565b9392505050565b6000612353612a1961ffff841681565b90565b61253d81612a09565b6000612353612a1963ffffffff841681565b61253d81612a25565b60c08101612a4e828961253b565b612a5b602083018861259a565b612a686040830187612a1c565b612a75606083018661259a565b612a82608083018561253b565b612a8f60a0830184612a37565b979650505050505050565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081525b60200190565b6020808252810161235381612a9a565b60ff9081169082165b9150600082821015612af957612af961298a565b500390565b80825b6001851115612b3d57808604811115612b1c57612b1c61298a565b6001851615612b2a57908102905b8002612b368560011c90565b9450612b01565b94509492505050565b600082612b5557506001612a02565b81612b6257506000612a02565b8160018114612b785760028114612b8257612baf565b6001915050612a02565b60ff841115612b9357612b9361298a565b8360020a915084821115612ba957612ba961298a565b50612a02565b5060208310610133831016604e8410600b8410161715612be2575081810a83811115612bdd57612bdd61298a565b612a02565b612bef8484846001612afe565b92509050818404811115612c0557612c0561298a565b0292915050565b60ff821691506000612a027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612b46565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c7757612c7761298a565b500290565b601e8152602081017f4e46544c6f616e466163696c697461746f723a206d617820666565203525000081529050612ac6565b6020808252810161235381612c7c565b601f8152602081017f4e46544c6f616e466163696c697461746f723a20616c7265616479207365740081529050612ac6565b6020808252810161235381612cbe565b601f8152602081017f4e46544c6f616e466163696c697461746f723a206c6f616e20636c6f7365640081529050612ac6565b6020808252810161235381612d00565b60318152602081017f4e46544c6f616e466163696c697461746f723a2050726f706f7365642074657281527f6d7320646f206e6f74207175616c696679000000000000000000000000000000602082015290506128e4565b6020808252810161235381612d42565b64ffffffffff8116905060ff821691506000612a0264ffffffffff8484612b46565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082612e0a57612e0a612dcc565b500490565b805161235381612629565b600060208284031215612e2f57612e2f600080fd5b60006125338484612e0f565b81612ae5565b60008219821115612e5457612e5461298a565b500190565b6020808252810161235381604581527f4e46544c6f616e466163696c697461746f723a2070726f706f7365642074657260208201527f6d73206d75737420626520626574746572207468616e206578697374696e672060408201527f7465726d73000000000000000000000000000000000000000000000000000000606082015260800190565b604081016129f5828561253b565b60608101612efc8286612a1c565b612f09602083018561253b565b6125336040830184612a37565b64ffffffffff8116905064ffffffffff8216915060008264ffffffffff03821115612e5457612e5461298a565b60608101612f51828661259a565b612f5e602083018561253b565b612533604083018461259a565b60218152602081017f4e46544c6f616e466163696c697461746f723a20626f72726f776572206f6e6c81527f7900000000000000000000000000000000000000000000000000000000000000602082015290506128e4565b6020808252810161235381612f6b565b60378152602081017f4e46544c6f616e466163696c697461746f723a20756e6465727772697474656e81527f2c20757365207265706179416e64436c6f73654c6f616e000000000000000000602082015290506128e4565b6020808252810161235381612fd3565b60248152602081017f4e46544c6f616e466163696c697461746f723a20756e6465727772697465722081527f6f6e6c7900000000000000000000000000000000000000000000000000000000602082015290506128e4565b602080825281016123538161303b565b60278152602081017f4e46544c6f616e466163696c697461746f723a207061796d656e74206973206e81527f6f74206c61746500000000000000000000000000000000000000000000000000602082015290506128e4565b60208082528101612353816130a3565b60268152602081017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015290506128e4565b602080825281016123538161310b565b60148152602081017f5452414e534645525f46524f4d5f4641494c454400000000000000000000000081529050612ac6565b6020808252810161235381613173565b600f8152602081017f5452414e534645525f4641494c4544000000000000000000000000000000000081529050612ac6565b60208082528101612353816131b556fea26469706673582212202b29a83e853222aea0c1c5380f1bb5a0d12f4b459080ac2d2e71450ec9b5d40c64736f6c634300080a0033","abi":[{"inputs":[{"internalType":"address","name":"_manager","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"underwriter","type":"address"},{"indexed":true,"internalType":"address","name":"replacedLoanOwner","type":"address"},{"indexed":false,"internalType":"uint256","name":"interestEarned","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"replacedAmount","type":"uint256"}],"name":"BuyoutUnderwriter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"Close","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"minter","type":"address"},{"indexed":false,"internalType":"uint256","name":"collateralTokenId","type":"uint256"},{"indexed":false,"internalType":"address","name":"collateralContract","type":"address"},{"indexed":false,"internalType":"uint256","name":"maxInterestRate","type":"uint256"},{"indexed":false,"internalType":"address","name":"loanAssetContract","type":"address"},{"indexed":false,"internalType":"uint256","name":"minLoanAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"minDurationSeconds","type":"uint256"}],"name":"CreateLoan","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"repayer","type":"address"},{"indexed":true,"internalType":"address","name":"loanOwner","type":"address"},{"indexed":false,"internalType":"uint256","name":"interestEarned","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"loanAmount","type":"uint256"}],"name":"Repay","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"SeizeCollateral","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"underwriter","type":"address"},{"indexed":false,"internalType":"uint256","name":"interestRate","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"loanAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"durationSeconds","type":"uint256"}],"name":"UnderwriteLoan","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"feeRate","type":"uint32"}],"name":"UpdateOriginationFeeRate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"improvementPercent","type":"uint256"}],"name":"UpdateRequiredImprovementPercent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"asset","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"to","type":"address"}],"name":"WithdrawOriginationFees","type":"event"},{"inputs":[],"name":"INTEREST_RATE_DECIMALS","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SCALAR","outputs":[{"internalType":"uint40","name":"","type":"uint40"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"_loanInfo","outputs":[{"internalType":"bool","name":"closed","type":"bool"},{"internalType":"uint16","name":"perSecondInterestRate","type":"uint16"},{"internalType":"uint32","name":"durationSeconds","type":"uint32"},{"internalType":"uint40","name":"lastAccumulatedTimestamp","type":"uint40"},{"internalType":"address","name":"collateralContractAddress","type":"address"},{"internalType":"address","name":"loanAssetContractAddress","type":"address"},{"internalType":"uint256","name":"accumulatedInterest","type":"uint256"},{"internalType":"uint256","name":"loanAmount","type":"uint256"},{"internalType":"uint256","name":"collateralTokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"borrowTicketContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"loanId","type":"uint256"},{"internalType":"address","name":"sendCollateralTo","type":"address"}],"name":"closeLoan","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"collateralTokenId","type":"uint256"},{"internalType":"address","name":"collateralContractAddress","type":"address"},{"internalType":"uint16","name":"maxPerSecondInterest","type":"uint16"},{"internalType":"uint256","name":"minLoanAmount","type":"uint256"},{"internalType":"address","name":"loanAssetContractAddress","type":"address"},{"internalType":"uint32","name":"minDurationSeconds","type":"uint32"},{"internalType":"address","name":"mintBorrowTicketTo","type":"address"}],"name":"createLoan","outputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"loanId","type":"uint256"}],"name":"interestOwed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lendTicketContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"loanId","type":"uint256"}],"name":"loanEndSeconds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"loanId","type":"uint256"}],"name":"loanInfo","outputs":[{"internalType":"bool","name":"closed","type":"bool"},{"internalType":"uint16","name":"perSecondInterestRate","type":"uint16"},{"internalType":"uint32","name":"durationSeconds","type":"uint32"},{"internalType":"uint40","name":"lastAccumulatedTimestamp","type":"uint40"},{"internalType":"address","name":"collateralContractAddress","type":"address"},{"internalType":"address","name":"loanAssetContractAddress","type":"address"},{"internalType":"uint256","name":"accumulatedInterest","type":"uint256"},{"internalType":"uint256","name":"loanAmount","type":"uint256"},{"internalType":"uint256","name":"collateralTokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"originationFeeRate","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"loanId","type":"uint256"}],"name":"repayAndCloseLoan","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"requiredImprovementPercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"loanId","type":"uint256"},{"internalType":"address","name":"sendCollateralTo","type":"address"}],"name":"seizeCollateral","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_contract","type":"address"}],"name":"setBorrowTicketContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_contract","type":"address"}],"name":"setLendTicketContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"loanId","type":"uint256"}],"name":"totalOwed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"loanId","type":"uint256"},{"internalType":"uint16","name":"interestRate","type":"uint16"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint32","name":"durationSeconds","type":"uint32"},{"internalType":"address","name":"sendLendTicketTo","type":"address"}],"name":"underwriteLoan","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_originationFeeRate","type":"uint32"}],"name":"updateOriginationFeeRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_improvementPercentage","type":"uint256"}],"name":"updateRequiredImprovementPercentage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"to","type":"address"}],"name":"withdrawOriginationFees","outputs":[],"stateMutability":"nonpayable","type":"function"}]}